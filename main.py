import os
import re
import sqlite3
from datetime import datetime
from zoneinfo import ZoneInfo

from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

# ---------- ENV ----------
load_dotenv()
BOT_TOKEN   = os.getenv("BOT_TOKEN")
OPS_CHAT_ID = os.getenv("OPS_CHAT_ID")
TZ          = ZoneInfo(os.getenv("TZ", "Africa/Johannesburg"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")          # e.g. https://gncomanagerbot-1.onrender.com
BOT_SECRET  = os.getenv("BOT_SECRET", "gncohook")
PORT        = int(os.getenv("PORT", "10000"))   # Render/Railway set this automatically

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN not set in Environment")

OPS_CHAT_ID = int(OPS_CHAT_ID) if OPS_CHAT_ID else None

# ---------- DB ----------
DB_PATH = "gnco_ro.sqlite"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
    CREATE TABLE IF NOT EXISTS ro (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        ts TEXT,
        tg_user_id INTEGER,
        tg_username TEXT,
        phone TEXT,
        make_model TEXT,
        plate TEXT,
        odometer INTEGER,
        issue TEXT
    );
    """)
    conn.commit()
    conn.close()

def insert_ro(data, user):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        INSERT INTO ro (ts, tg_user_id, tg_username, phone, make_model, plate, odometer, issue)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        datetime.now(TZ).strftime("%d.%m.%Y, %H:%M (%Z)"),
        user.id,
        f"@{user.username}" if user.username else "",
        data["phone"],
        data["make_model"],
        data["plate"],
        data["odometer"],
        data["issue"]
    ))
    conn.commit()
    ro_id = c.lastrowid
    conn.close()
    return ro_id

# ---------- Conversation ----------
PHONE, MAKE_MODEL, PLATE, ODOMETER, ISSUE = range(5)
PHONE_RE    = re.compile(r"^\+27\d{9}$")
PLATE_CLEAN = re.compile(r"[^A-Z0-9]")

def norm_plate(s: str) -> str:
    return PLATE_CLEAN.sub("", s.upper())

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–µ–Ω–µ–¥–∂–µ—Ä GNCO üòä\n"
        "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É ‚Äî –Ω–∞–±–µ—Ä–∏ /ro\n\n"
        "–ù—É–∂–Ω—ã: —Ç–µ–ª–µ—Ñ–æ–Ω (+27‚Ä¶), –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å, –Ω–æ–º–µ—Ä (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤), –ø—Ä–æ–±–µ–≥ –∏ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.\n"
        "–ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ."
    )

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /ro /cancel /id /help")

async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"chat_id: `{update.effective_chat.id}`",
        parse_mode=ParseMode.MARKDOWN
    )

async def cmd_ro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "–û–∫, –Ω–∞—á–Ω—ë–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +27XXXXXXXXX",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)
    )
    return PHONE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û–∫–µ–π, –æ—Ç–º–µ–Ω–∏–ª–∏. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî /ro",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text.strip()
    if msg.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    if not PHONE_RE.match(msg):
        await update.message.reply_text("–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç +27XXXXXXXXX. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
        return PHONE
    context.user_data["phone"] = msg
    await update.message.reply_text("–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: Honda CG 125)")
    return MAKE_MODEL

async def ask_make_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if txt.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    context.user_data["make_model"] = txt[:100]
    await update.message.reply_text("–ù–æ–º–µ—Ä–Ω–æ–π –∑–Ω–∞–∫ (—è —Å–¥–µ–ª–∞—é –ë–ï–ó –ü–†–û–ë–ï–õ–û–í –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏):")
    return PLATE

async def ask_plate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    plate = norm_plate(update.message.text)
    if not plate or len(plate) < 3:
        await update.message.reply_text("–ù–æ–º–µ—Ä –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë —Ä–∞–∑ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤), –Ω–∞–ø—Ä–∏–º–µ—Ä CA12345.")
        return PLATE
    context.user_data["plate"] = plate
    await update.message.reply_text("–ü—Ä–æ–±–µ–≥ (–∫–º), —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º:")
    return ODOMETER

async def ask_odometer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        odo = int(update.message.text.replace(" ", ""))
        if odo < 0:
            raise ValueError
    except Exception:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –∫–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 45210.")
        return ODOMETER
    context.user_data["odometer"] = odo
    await update.message.reply_text("–ö—Ä–∞—Ç–∫–æ: —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –±–∞–π–∫–æ–º?")
    return ISSUE

async def finalize_issue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    issue = update.message.text.strip()
    context.user_data["issue"] = issue[:500]
    ro_id = insert_ro(context.user_data, update.effective_user)

    card = (
        f"üÜï RO#{ro_id} {datetime.now(TZ).strftime('%d.%m.%Y, %H:%M (%Z)')}\n"
        f"–ö–ª–∏–µ–Ω—Ç: @{update.effective_user.username or '‚Äî'}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"–ë–∞–π–∫: {context.user_data['make_model']}\n"
        f"–ù–æ–º–µ—Ä: {context.user_data['plate']}\n"
        f"–ü—Ä–æ–±–µ–≥: {context.user_data['odometer']} –∫–º\n"
        f"–ü—Ä–æ–±–ª–µ–º–∞: {context.user_data['issue']}"
    )
    if OPS_CHAT_ID:
        await context.bot.send_message(chat_id=OPS_CHAT_ID, text=card)

    await update.message.reply_text(
        f"–ì–æ—Ç–æ–≤–æ! RO#{ro_id} –æ—Ç–∫—Ä—ã—Ç ‚úÖ\n"
        f"–ú—ã –≥–ª—è–Ω–µ–º –±–∞–π–∫ –∏ –≤–µ—Ä–Ω—ë–º—Å—è —Å —Ü–µ–Ω–æ–π. –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ ‚Äî –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Å—é–¥–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    # –õ–æ–≥–∏ –Ω–∞ Render –≤–∏–¥–Ω–æ –≤ "All logs"
    print("Error:", context.error)

# ---------- ENTRY ----------
def main():
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("ro", cmd_ro)],
        states={
            PHONE:      [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
            MAKE_MODEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_make_model)],
            PLATE:      [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_plate)],
            ODOMETER:   [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_odometer)],
            ISSUE:      [MessageHandler(filters.TEXT & ~filters.COMMAND, finalize_issue)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("id", cmd_id))
    app.add_handler(conv)
    app.add_error_handler(on_error)

    if not WEBHOOK_URL:
        raise RuntimeError("WEBHOOK_URL is not set (–ø—Ä–∏–º–µ—Ä: https://gncomanagerbot-1.onrender.com)")

    webhook_path = f"/{BOT_SECRET}"
    full_webhook_url = f"{WEBHOOK_URL}{webhook_path}"

    print(f"Starting webhook on 0.0.0.0:{PORT}, path: {webhook_path}")
    print(f"Setting Telegram webhook to: {full_webhook_url}")

    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞ (PTB —Å–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç webhook)
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=webhook_path,
        webhook_url=full_webhook_url,
    )

if __name__ == "__main__":
    main()
